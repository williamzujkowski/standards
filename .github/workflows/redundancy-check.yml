name: Redundancy Check

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    - cron: 0 0 * * 0  # Weekly on Sunday

jobs:
  check-redundancy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Run redundancy checks
        run: |
          python tests/test_redundancy.py || {
            exit_code=$?
            if [ $exit_code -eq 2 ]; then
              echo "‚ö†Ô∏è  Non-critical redundancy warnings detected. Continuing..."
              exit 0
            else
              exit $exit_code
            fi
          }

      - name: Check if STANDARDS_INDEX.md needs update
        run: |
          # Run the generator and check if there are changes
          python scripts/generate_standards_index.py
          if git diff --exit-code docs/guides/STANDARDS_INDEX.md; then
            echo "‚úÖ STANDARDS_INDEX.md is up to date"
          else
            echo "‚ùå STANDARDS_INDEX.md needs to be regenerated"
            echo "üîß Auto-fixing by committing the updated index..."

            # Configure git for automated commits
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"

            # Stage and commit the changes
            git add docs/guides/STANDARDS_INDEX.md
            git commit -m "Auto-update STANDARDS_INDEX.md [skip ci]

            Generated by GitHub Actions workflow
            Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

            # Push if on main branch
            if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.ref }}" = "refs/heads/master" ]; then
              git push
              echo "‚úÖ Automatically updated STANDARDS_INDEX.md"
            else
              echo "‚ÑπÔ∏è  Changes committed locally. Manual push required for non-main branches."
            fi
          fi

      - name: Validate YAML files
        run: |
          echo "Checking YAML syntax..."
          python -c "import yaml; yaml.safe_load(open('config/MANIFEST.yaml'))"
          python -c "import yaml; yaml.safe_load(open('config/standards-schema.yaml'))"
          python -c "import yaml; yaml.safe_load(open('config/TOOLS_CATALOG.yaml'))"
          python -c "import yaml; yaml.safe_load(open('.standards.yml'))"
          echo "‚úÖ All YAML files are valid"

      - name: Validate JSON files
        run: |
          echo "Checking JSON syntax..."
          python -c "import json; json.load(open('config/standards-api.json'))"
          echo "‚úÖ All JSON files are valid"

      - name: Check for large files
        run: |
          echo "Checking for overly large files..."
          large_files=$(find . -name "*.md" -size +100k -type f)
          if [ -n "$large_files" ]; then
            echo "‚ö†Ô∏è  Warning: Large markdown files detected:"
            echo "$large_files"
            echo "Consider splitting these files or creating summaries"
          fi

      - name: Report file organization
        run: |
          echo "üìä Repository Statistics:"
          echo "Standards files: $(ls -1 docs/standards/*_STANDARDS.md 2>/dev/null | wc -l)"
          echo "Support files: $(ls -1 *.md | grep -v _STANDARDS | wc -l)"
          echo "Config files: $(ls -1 config/*.{yaml,yml,json} 2>/dev/null | wc -l)"
          echo "Total size: $(du -sh . | cut -f1)"
