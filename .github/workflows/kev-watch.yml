name: KEV Catalog Watcher

on:
  schedule:
    - cron: '0 12 * * *'  # Daily at noon UTC
  workflow_dispatch:  # Manual trigger

permissions:
  contents: write
  issues: write

jobs:
  check-kev-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check for KEV updates
        id: kev-check
        run: |
          node scripts/check-kev-updates.js
        continue-on-error: true

      - name: Commit updates if found
        if: steps.kev-check.outputs.has_updates == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add data/kev_latest.json
          git diff --staged --quiet || git commit -m "chore: update KEV catalog cache

          Found ${{ steps.kev-check.outputs.new_count }} new vulnerabilities

          Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          git push

      - name: Create or update issue
        if: steps.kev-check.outputs.has_updates == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const issueBodyFile = '${{ steps.kev-check.outputs.issue_body_file }}';

            let issueBody = '## New KEV Entries Detected\n\nNew vulnerabilities detected in CISA KEV Catalog';

            if (issueBodyFile && fs.existsSync(issueBodyFile)) {
              issueBody = fs.readFileSync(issueBodyFile, 'utf8');
            }

            // Search for existing open KEV issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'kev-update'
            });

            const title = `KEV Update: ${new Date().toISOString().split('T')[0]} - ${{ steps.kev-check.outputs.new_count }} new entries`;

            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                title: title,
                body: issueBody
              });
              console.log(`Updated issue #${issues.data[0].number}`);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: issueBody,
                labels: ['kev-update', 'security']
              });
              console.log(`Created issue #${issue.data.number}`);
            }
