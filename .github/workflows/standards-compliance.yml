---
name: Standards Compliance Template

'on':
  pull_request:
    branches: [main, master, develop]
  push:
    branches: [main, master, develop]

jobs:
  # Language-agnostic checks
  general-compliance:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1

      - name: Check file formatting
        run: |
          # Check for trailing whitespace using our comprehensive script
          echo "Current directory: $(pwd)"
          echo "Checking if script exists..."
          if [ -f scripts/check_whitespace.sh ]; then
            echo "Script found at scripts/check_whitespace.sh"
            ls -la scripts/check_whitespace.sh
            echo "Running whitespace check..."
            bash scripts/check_whitespace.sh || {
              echo "Script exited with code $?"
              exit 1
            }
          else
            echo "Script not found, using fallback check..."
            # Fallback to basic check if script doesn't exist, excluding node_modules
            files_with_whitespace=$(find . -type f \( -name "*.md" -o -name "*.yml" -o -name "*.yaml" \) \
              -not -path "./.git/*" \
              -not -path "./node_modules/*" \
              -not -path "./standards/compliance/node_modules/*" \
              -exec grep -l '[[:space:]]$' {} \; 2>/dev/null)
            if [ -n "$files_with_whitespace" ]; then
              echo "❌ Trailing whitespace found in files"
              echo "$files_with_whitespace"
              exit 1
            else
              echo "✅ No trailing whitespace found"
            fi
          fi

      - name: Validate YAML files
        run: |
          find . -name "*.yml" -o -name "*.yaml" | xargs -I {} yamllint {}

      - name: Run Knowledge Management Tests
        run: |
          echo "Running knowledge management validation tests..."
          if [ -f tests/validate_knowledge_management.sh ]; then
            cd tests && bash validate_knowledge_management.sh
          fi

      - name: Run Cross-Reference Validation
        run: |
          echo "Running cross-reference validation..."
          if [ -f tests/validate_cross_references.py ]; then
            python3 tests/validate_cross_references.py || {
              echo "Cross-reference validation failed. Run 'python3 tests/fix_validation_issues.py' locally to fix."
              exit 1
            }
          fi

      - name: Check for large files
        run: |
          # Exclude OSCAL catalog files which are legitimately large (official NIST data)
          large_files=$(find . -type f -size +5M -not -path "./.git/*" \
            -not -path "*/oscal/catalogs/*" \
            -not -name "*catalog*.json" \
            -exec ls -lh {} \;)
          if [ -n "$large_files" ]; then
            echo "Error: Large files found (>5MB):"
            echo "$large_files"
            echo ""
            echo "Note: OSCAL catalog files are excluded from this check as they contain"
            echo "official NIST control data and are expected to be large."
            exit 1
          else
            echo "No large files found (>5MB) - OSCAL catalogs excluded"
          fi

      - name: Security - Check for secrets
        uses: trufflesecurity/trufflehog@v3.82.13
        with:
          path: ./

  # Python-specific compliance
  python-compliance:
    if: |
      contains(github.repository, 'python') ||
      contains(github.repository, 'py')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1

      - name: Set up Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d  # v5.1.0
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install black isort flake8 mypy pytest pytest-cov safety bandit

      - name: Format check with Black
        run: black --check .

      - name: Import sort check with isort
        run: isort --check-only .

      - name: Lint with flake8
        run: flake8 .

      - name: Type check with mypy
        run: mypy .

      - name: Security check with bandit
        run: bandit -r . -ll

      - name: Test with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-fail-under=85

  # JavaScript/TypeScript compliance
  javascript-compliance:
    if: >
      contains(github.repository, 'js') ||
      contains(github.repository, 'ts') ||
      contains(github.repository, 'node')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8  # v4.0.2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Lint check
        run: npm run lint

      - name: Type check (TypeScript)
        if: contains(github.repository, 'ts')
        run: npm run type-check

      - name: Test with coverage
        run: npm run test:coverage

      - name: Security audit
        run: npm audit --audit-level=high

  # Go compliance
  go-compliance:
    if: contains(github.repository, 'go')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1

      - name: Setup Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491  # v5.0.0
        with:
          go-version: '1.21'

      - name: Format check
        run: |
          gofmt -l .
          test -z $(gofmt -l .)

      - name: Vet
        run: go vet ./...

      - name: Test with coverage
        run: |
          go test -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out | grep total | \
            awk '{print $3}' | sed 's/%//g' | \
            awk '{if ($1 < 85) {
              print "Coverage is below 85%: " $1 "%"; exit 1}}'

  # Performance and accessibility checks (for web projects)
  web-compliance:
    if: |
      contains(github.repository, 'web') ||
      contains(github.repository, 'frontend')
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@2f8dda6cf4de7d73b29853c3f29e73a01e297bd8  # v12.1.0
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Accessibility check
        uses: a11ywatch/github-action@318a611fdbb84063900abb38aec60e459c63b1e2  # v2.1.12
        with:
          WEBSITE_URL: ${{ github.event.repository.homepage }}
          WCAG_LEVEL: AA
