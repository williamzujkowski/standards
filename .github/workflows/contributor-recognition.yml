name: Contributor Recognition

on:
  pull_request:
    types: [closed]
  issues:
    types: [closed]

jobs:
  recognize-contribution:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || (github.event_name == 'issues' && github.event.issue.state_reason == 'completed')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Analyze contribution
        id: analyze
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const author = context.payload.sender.login;
            const eventType = context.eventName;
            
            let contributionType = '';
            let contributionSize = 'small';
            let isFirstContribution = false;
            
            if (eventType === 'pull_request') {
              const pr = context.payload.pull_request;
              
              // Determine contribution type from PR labels and changes
              const labels = pr.labels.map(label => label.name);
              
              if (labels.includes('standards-proposal') || labels.includes('new-standard')) {
                contributionType = 'New Standard';
                contributionSize = 'large';
              } else if (labels.includes('enhancement') || labels.includes('feature-request')) {
                contributionType = 'Enhancement';
                contributionSize = 'medium';
              } else if (labels.includes('bug')) {
                contributionType = 'Bug Fix';
                contributionSize = 'small';
              } else if (labels.includes('documentation')) {
                contributionType = 'Documentation';
                contributionSize = 'small';
              } else {
                contributionType = 'Code Improvement';
              }
              
              // Check if this is their first merged PR
              const { data: prs } = await github.rest.search.issuesAndPullRequests({
                q: `repo:${owner}/${repo} author:${author} type:pr is:merged`,
              });
              
              isFirstContribution = prs.total_count === 1;
              
              // Determine size based on changes
              if (pr.additions + pr.deletions > 500) {
                contributionSize = 'large';
              } else if (pr.additions + pr.deletions > 100) {
                contributionSize = 'medium';
              }
              
            } else if (eventType === 'issues') {
              contributionType = 'Issue Report';
              contributionSize = 'small';
              
              // Check if this is their first issue
              const { data: issues } = await github.rest.search.issuesAndPullRequests({
                q: `repo:${owner}/${repo} author:${author} type:issue`,
              });
              
              isFirstContribution = issues.total_count === 1;
            }
            
            return {
              author,
              contributionType,
              contributionSize,
              isFirstContribution,
              eventType
            };

      - name: Create recognition comment
        uses: actions/github-script@v7
        with:
          script: |
            const result = ${{ steps.analyze.outputs.result }};
            const { owner, repo } = context.repo;
            const { author, contributionType, contributionSize, isFirstContribution } = result;
            
            let recognitionMessage = '';
            let badges = [];
            
            // Determine badges based on contribution
            if (isFirstContribution) {
              badges.push('üåü First Contribution');
            }
            
            if (contributionType === 'New Standard') {
              badges.push('üìã Standards Creator');
            } else if (contributionType === 'Enhancement') {
              badges.push('‚ö° Enhancer');
            } else if (contributionType === 'Bug Fix') {
              badges.push('üêõ Bug Hunter');
            } else if (contributionType === 'Documentation') {
              badges.push('üìö Documentation Hero');
            }
            
            if (contributionSize === 'large') {
              badges.push('üèÜ Major Contributor');
            } else if (contributionSize === 'medium') {
              badges.push('ü•à Significant Contributor');
            }
            
            recognitionMessage = `
            # Thank You for Your Contribution! üéâ
            
            @${author}, your ${contributionType.toLowerCase()} has been successfully merged/resolved!
            
            ## Recognition Badges Earned
            ${badges.map(badge => `- ${badge}`).join('\n')}
            
            ## Contribution Impact
            
            Your work helps improve software development standards for:
            - Development teams implementing better practices
            - Organizations seeking compliance frameworks
            - Individual developers learning best practices
            - The broader software development community
            
            ## What's Next?
            
            ${isFirstContribution ? `
            Welcome to our contributor community! Consider:
            - Exploring other [open issues](https://github.com/${owner}/${repo}/issues)
            - Joining our [discussions](https://github.com/${owner}/${repo}/discussions)
            - Following the repository for updates
            - Sharing your experience with the standards
            ` : `
            Thank you for your continued contributions! You might be interested in:
            - Mentoring new contributors
            - Reviewing open pull requests
            - Proposing new standards or enhancements
            - Sharing expertise in discussions
            `}
            
            ## Community Recognition
            
            Your contribution will be:
            - ‚úÖ Added to our contributor hall of fame
            - üìù Included in the next release notes
            - üéñÔ∏è Recognized in our community showcase
            - üìä Counted in our contribution metrics
            
            Thank you for making the software development community better! üöÄ
            
            ---
            *Your contributions matter and are deeply appreciated by the entire community.*
            `;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: context.issue.number,
              body: recognitionMessage
            });

      - name: Update contributor database
        uses: actions/github-script@v7
        with:
          script: |
            const result = ${{ steps.analyze.outputs.result }};
            const { owner, repo } = context.repo;
            const { author, contributionType, contributionSize, isFirstContribution } = result;
            
            // This would typically update a contributor database or file
            // For now, we'll create an issue to track the contribution
            
            if (isFirstContribution) {
              await github.rest.issues.create({
                owner,
                repo,
                title: `üåü New Contributor Recognition: ${author}`,
                body: `
            ## New Contributor Alert! üéâ
            
            Please welcome @${author} to our contributor community!
            
            **First Contribution:** ${contributionType}
            **Contribution Size:** ${contributionSize}
            **PR/Issue:** #${context.issue.number}
            
            ## Actions Needed
            
            - [ ] Add to contributor showcase
            - [ ] Update contributor documentation
            - [ ] Consider for mentor program
            - [ ] Follow up on contribution experience
            
            ## Contribution Details
            
            This contributor made their first ${contributionType.toLowerCase()} to our standards repository. 
            Let's make sure they feel welcomed and supported in future contributions!
            `,
                labels: ['contributor-recognition', 'new-contributor', 'community']
              });
            }

      - name: Add contributor labels
        uses: actions/github-script@v7
        with:
          script: |
            const result = ${{ steps.analyze.outputs.result }};
            const { contributionType, contributionSize, isFirstContribution } = result;
            const { owner, repo } = context.repo;
            
            let labelsToAdd = ['contribution-recognized'];
            
            if (isFirstContribution) {
              labelsToAdd.push('first-contribution');
            }
            
            if (contributionType === 'New Standard') {
              labelsToAdd.push('standards-creator');
            } else if (contributionType === 'Documentation') {
              labelsToAdd.push('documentation-contributor');
            } else if (contributionType === 'Bug Fix') {
              labelsToAdd.push('bug-fix-contributor');
            }
            
            if (contributionSize === 'large') {
              labelsToAdd.push('major-contribution');
            }
            
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: context.issue.number,
              labels: labelsToAdd
            });