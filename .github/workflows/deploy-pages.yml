name: Deploy to GitHub Pages

on:
  push:
    branches: ["master", "main", "update-readme-elevator-pitch"]
    paths:
      - 'docs/**'
      - '.github/workflows/deploy-pages.yml'
  workflow_dispatch:
  pull_request:
    branches: ["master", "main"]
    paths:
      - 'docs/**'
      - '.github/workflows/deploy-pages.yml'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0
          working-directory: ./docs
      
      - name: Create Gemfile if not exists
        run: |
          cd docs
          if [ ! -f Gemfile ]; then
            cat > Gemfile << 'EOF'
          source "https://rubygems.org"
          gem "jekyll", "~> 4.3.3"
          gem "github-pages", group: :jekyll_plugins
          gem "jekyll-feed", "~> 0.12"
          gem "jekyll-seo-tag"
          gem "jekyll-sitemap"
          gem "jekyll-relative-links"
          gem "jemoji"
          gem "kramdown-parser-gfm"
          EOF
          fi
          
      - name: Install dependencies
        run: |
          cd docs
          bundle install
          
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
        
      - name: Build with Jekyll
        run: |
          cd docs
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
          
      - name: Validate HTML
        run: |
          # Install html-proofer
          gem install html-proofer
          # Validate the site (allow external links to fail)
          htmlproofer ./docs/_site \
            --disable-external \
            --ignore-urls "/^http:\/\/127.0.0.1/,/^http:\/\/localhost/" \
            --ignore-files "/assets/,/js/" \
            --allow-hash-href \
            --enforce-https=false \
            || echo "HTML validation completed with warnings"
            
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs/_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
  # Validation job
  validate:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Playwright
        run: |
          npm init -y
          npm install @playwright/test
          npx playwright install chromium
          
      - name: Wait for deployment
        run: sleep 30
        
      - name: Validate deployed site
        run: |
          cat > validate-pages.js << 'EOF'
          const { chromium } = require('playwright');
          
          (async () => {
            const browser = await chromium.launch();
            const context = await browser.newContext();
            const page = await context.newPage();
            
            const baseUrl = 'https://williamzujkowski.github.io/standards';
            const pagesToCheck = [
              '/',
              '/guides/KICKSTART_PROMPT',
              '/standards/UNIFIED_STANDARDS',
              '/guides/STANDARDS_INDEX'
            ];
            
            let hasErrors = false;
            
            for (const path of pagesToCheck) {
              try {
                console.log(`Checking ${baseUrl}${path}...`);
                const response = await page.goto(`${baseUrl}${path}`, {
                  waitUntil: 'networkidle'
                });
                
                if (!response.ok()) {
                  console.error(`  ❌ Failed with status: ${response.status()}`);
                  hasErrors = true;
                } else {
                  // Check for basic content
                  const title = await page.title();
                  console.log(`  ✅ Page loaded successfully: ${title}`);
                  
                  // Check for broken images
                  const brokenImages = await page.evaluate(() => {
                    const images = Array.from(document.querySelectorAll('img'));
                    return images.filter(img => !img.complete || img.naturalHeight === 0).length;
                  });
                  
                  if (brokenImages > 0) {
                    console.log(`  ⚠️ Found ${brokenImages} broken images`);
                  }
                  
                  // Check for console errors
                  page.on('console', msg => {
                    if (msg.type() === 'error') {
                      console.log(`  ⚠️ Console error: ${msg.text()}`);
                    }
                  });
                }
              } catch (error) {
                console.error(`  ❌ Error checking page: ${error.message}`);
                hasErrors = true;
              }
            }
            
            await browser.close();
            
            if (hasErrors) {
              console.log('\n❌ Validation failed with errors');
              process.exit(1);
            } else {
              console.log('\n✅ All pages validated successfully');
            }
          })();
          EOF
          
          node validate-pages.js