name: Comprehensive Validation Suite

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main, develop]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - documentation
          - examples
          - skills
          - product-matrix
          - integration

jobs:
  quality-gates:
    name: Quality Gate Checks
    runs-on: ubuntu-latest
    outputs:
      should_continue: ${{ steps.gate-check.outputs.should_continue }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pyyaml

      - name: Run quick validation
        id: gate-check
        run: |
          echo "Checking repository structure..."
          if [ ! -f "config/product-matrix.yaml" ]; then
            echo "::error::Missing product-matrix.yaml"
            echo "should_continue=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "should_continue=true" >> $GITHUB_OUTPUT

  documentation-validation:
    name: Documentation Validation
    needs: quality-gates
    if: needs.quality-gates.outputs.should_continue == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pytest-html pyyaml

      - name: Run documentation tests
        run: |
          pytest tests/validation/test_documentation.py \
            -v \
            --tb=short \
            --cov=docs \
            --cov-report=term-missing \
            --cov-report=html:coverage/documentation \
            --html=reports/documentation-validation.html \
            --self-contained-html \
            -n auto

      - name: Check documentation accuracy gate
        run: |
          echo "Verifying 100% documentation accuracy gate..."
          pytest tests/validation/test_documentation.py::TestDocumentationQualityGate \
            -v --tb=short

      - name: Upload documentation coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-coverage
          path: |
            coverage/documentation/
            reports/documentation-validation.html
          retention-days: 30

  example-validation:
    name: Example Functionality Validation
    needs: quality-gates
    if: needs.quality-gates.outputs.should_continue == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pytest-html pyyaml

      - name: Run example tests
        run: |
          pytest tests/validation/test_examples.py \
            -v \
            --tb=short \
            --cov=examples \
            --cov-report=term-missing \
            --cov-report=html:coverage/examples \
            --html=reports/example-validation.html \
            --self-contained-html \
            -n auto

      - name: Check example functionality gate
        run: |
          echo "Verifying 100% example functionality gate..."
          pytest tests/validation/test_examples.py::TestExampleQualityGate \
            -v --tb=short

      - name: Upload example coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: example-coverage
          path: |
            coverage/examples/
            reports/example-validation.html
          retention-days: 30

  skills-validation:
    name: Skills Compliance Validation
    needs: quality-gates
    if: needs.quality-gates.outputs.should_continue == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pytest-html pyyaml

      - name: Run skills tests
        run: |
          pytest tests/validation/test_skills.py \
            -v \
            --tb=short \
            --cov=skills \
            --cov-report=term-missing \
            --cov-report=html:coverage/skills \
            --html=reports/skills-validation.html \
            --self-contained-html \
            -n auto

      - name: Check skills compliance gate
        run: |
          echo "Verifying 100% skills compliance gate..."
          pytest tests/validation/test_skills.py::TestSkillQualityGate \
            -v --tb=short

      - name: Upload skills coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: skills-coverage
          path: |
            coverage/skills/
            reports/skills-validation.html
          retention-days: 30

  product-matrix-validation:
    name: Product Matrix Validation
    needs: quality-gates
    if: needs.quality-gates.outputs.should_continue == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-html pyyaml

      - name: Run product matrix tests
        run: |
          pytest tests/validation/test_product_matrix.py \
            -v \
            --tb=short \
            --html=reports/product-matrix-validation.html \
            --self-contained-html

      - name: Check product matrix quality gate
        run: |
          echo "Verifying product matrix quality gate..."
          pytest tests/validation/test_product_matrix.py::TestProductMatrixQualityGate \
            -v --tb=short

      - name: Upload product matrix report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: product-matrix-report
          path: reports/product-matrix-validation.html
          retention-days: 30

  integration-validation:
    name: Integration Workflow Validation
    needs: [documentation-validation, example-validation, skills-validation, product-matrix-validation]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-html pyyaml

      - name: Run full validation suite
        run: |
          pytest tests/validation/ \
            -v \
            --tb=short \
            --cov=. \
            --cov-report=term-missing \
            --cov-report=html:coverage/full \
            --cov-report=xml:coverage.xml \
            --html=reports/full-validation.html \
            --self-contained-html \
            -n auto \
            -m "not slow"

      - name: Generate validation summary
        if: always()
        run: |
          python -c "
          import json
          import sys
          from pathlib import Path

          summary = {
              'validation_run': {
                  'timestamp': '$(date -Iseconds)',
                  'branch': '${GITHUB_REF_NAME}',
                  'commit': '${GITHUB_SHA}',
                  'status': 'completed'
              },
              'quality_gates': {
                  'documentation_accuracy': 100,
                  'example_functionality': 100,
                  'skills_compliance': 100,
                  'integration_workflows': 90
              }
          }

          Path('reports').mkdir(exist_ok=True)
          with open('reports/validation-summary.json', 'w') as f:
              json.dump(summary, f, indent=2)

          print('Validation Summary:')
          print(json.dumps(summary, indent=2))
          "

      - name: Upload full validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-validation-report
          path: |
            coverage/full/
            reports/full-validation.html
            reports/validation-summary.json
            coverage.xml
          retention-days: 30

      - name: Upload coverage to artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 30

  quality-gate-summary:
    name: Quality Gate Summary
    needs: [documentation-validation, example-validation, skills-validation, product-matrix-validation, integration-validation]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Check all quality gates
        run: |
          echo "# Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | Target | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation Accuracy | 100% | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Example Functionality | 100% | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Skills Compliance | 100% | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Workflows | 90% | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ needs.documentation-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Examples: ${{ needs.example-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Skills: ${{ needs.skills-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Product Matrix: ${{ needs.product-matrix-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration: ${{ needs.integration-validation.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any gate failed
        if: |
          needs.documentation-validation.result == 'failure' ||
          needs.example-validation.result == 'failure' ||
          needs.skills-validation.result == 'failure' ||
          needs.product-matrix-validation.result == 'failure'
        run: |
          echo "::error::One or more quality gates failed"
          exit 1
