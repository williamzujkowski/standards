{
  "autoTaggingRules": {
    "enabled": true,
    "patterns": [
      {
        "confidence": "high",
        "regex": "\\b(authenticate|login|signin)\\b",
        "suggestedControls": [
          "ia-2",
          "ia-5"
        ]
      },
      {
        "confidence": "high",
        "regex": "\\b(authorize|permission|access.?control)\\b",
        "suggestedControls": [
          "ac-3",
          "ac-6"
        ]
      },
      {
        "confidence": "high",
        "regex": "\\b(encrypt|decrypt|crypto)\\b",
        "suggestedControls": [
          "sc-13"
        ]
      },
      {
        "confidence": "medium",
        "regex": "\\b(session|timeout|expir)\\b",
        "suggestedControls": [
          "ac-12"
        ]
      },
      {
        "confidence": "medium",
        "regex": "\\b(log|audit|track)\\b",
        "suggestedControls": [
          "au-2",
          "au-3"
        ]
      },
      {
        "confidence": "high",
        "regex": "\\b(validat|sanitiz)\\b",
        "suggestedControls": [
          "si-10"
        ]
      },
      {
        "confidence": "medium",
        "regex": "\\b(error|exception|catch)\\b",
        "suggestedControls": [
          "si-11"
        ]
      },
      {
        "confidence": "high",
        "regex": "\\b(tls|https|ssl)\\b",
        "suggestedControls": [
          "sc-8"
        ]
      }
    ]
  },
  "controlDescriptions": {
    "ac-12": {
      "common_patterns": [
        "idle timeout",
        "absolute timeout",
        "forced logout"
      ],
      "implementation_guidance": "Implement timeout mechanisms with configurable durations",
      "project_examples": [
        "30-minute inactivity timeout",
        "8-hour absolute session limit",
        "Admin force-logout capability"
      ],
      "summary": "Automatically terminate sessions after inactivity",
      "title": "Session Termination"
    },
    "ac-2": {
      "common_patterns": [
        "user registration",
        "account provisioning",
        "role assignment"
      ],
      "implementation_guidance": "Implement user CRUD operations with proper validation and audit logging",
      "project_examples": [
        "User registration endpoints with email verification",
        "Admin panel for user management",
        "Automated account deprovisioning"
      ],
      "summary": "Manage system accounts including creation, modification, and deletion",
      "title": "Account Management"
    },
    "ac-3": {
      "common_patterns": [
        "permission checks",
        "role validation",
        "resource authorization"
      ],
      "implementation_guidance": "Use RBAC or ABAC patterns with middleware/decorators",
      "project_examples": [
        "API endpoint authorization middleware",
        "Resource-level permission checks",
        "Dynamic permission evaluation"
      ],
      "summary": "Enforce approved authorizations for logical access",
      "title": "Access Enforcement"
    },
    "ac-6": {
      "common_patterns": [
        "minimal scopes",
        "restricted roles",
        "permission boundaries"
      ],
      "implementation_guidance": "Grant minimal permissions required for functionality",
      "project_examples": [
        "Microservice-specific database users",
        "API scopes limited to required operations",
        "Time-bound elevated privileges"
      ],
      "summary": "Employ principle of least privilege",
      "title": "Least Privilege"
    },
    "au-2": {
      "common_patterns": [
        "security logging",
        "audit trails",
        "event correlation"
      ],
      "implementation_guidance": "Log authentication, authorization, and data modification events",
      "project_examples": [
        "Failed login attempt logging",
        "Permission change audit trail",
        "Data access logging"
      ],
      "summary": "Define and log security-relevant events",
      "title": "Audit Events"
    },
    "au-3": {
      "common_patterns": [
        "structured logging",
        "log enrichment",
        "correlation IDs"
      ],
      "implementation_guidance": "Include who, what, when, where, and outcome in logs",
      "project_examples": [
        "JSON structured logs with all required fields",
        "Request ID propagation",
        "User context in all audit logs"
      ],
      "summary": "Ensure audit records contain required information",
      "title": "Content of Audit Records"
    },
    "ia-2": {
      "common_patterns": [
        "login endpoints",
        "JWT tokens",
        "OAuth integration"
      ],
      "implementation_guidance": "Implement secure authentication with MFA support",
      "project_examples": [
        "Username/password with MFA",
        "SSO integration with SAML/OAuth",
        "Biometric authentication support"
      ],
      "summary": "Uniquely identify and authenticate users",
      "title": "Identification and Authentication"
    },
    "ia-5": {
      "common_patterns": [
        "password policy",
        "token rotation",
        "certificate management"
      ],
      "implementation_guidance": "Enforce strong password policies and secure token management",
      "project_examples": [
        "Password complexity requirements",
        "API key rotation system",
        "Certificate renewal automation"
      ],
      "summary": "Manage authenticators (passwords, tokens, certificates)",
      "title": "Authenticator Management"
    },
    "sc-13": {
      "common_patterns": [
        "encryption at rest",
        "password hashing",
        "digital signatures"
      ],
      "implementation_guidance": "Use approved algorithms for encryption and hashing",
      "project_examples": [
        "AES-256 for data encryption",
        "Argon2id for password hashing",
        "RSA-4096 for digital signatures"
      ],
      "summary": "Use cryptography to protect information",
      "title": "Cryptographic Protection"
    },
    "sc-8": {
      "common_patterns": [
        "HTTPS enforcement",
        "TLS configuration",
        "certificate pinning"
      ],
      "implementation_guidance": "Use TLS 1.2+ for all network communications",
      "project_examples": [
        "Force HTTPS redirects",
        "TLS 1.3 with strong ciphers",
        "Certificate pinning for mobile apps"
      ],
      "summary": "Protect data confidentiality during transmission",
      "title": "Transmission Confidentiality"
    },
    "si-10": {
      "common_patterns": [
        "input validation",
        "sanitization",
        "parameterized queries"
      ],
      "implementation_guidance": "Implement comprehensive input validation and sanitization",
      "project_examples": [
        "Schema validation for API inputs",
        "SQL injection prevention",
        "XSS protection"
      ],
      "summary": "Validate all information inputs",
      "title": "Information Input Validation"
    },
    "si-11": {
      "common_patterns": [
        "error logging",
        "sanitized responses",
        "error monitoring"
      ],
      "implementation_guidance": "Implement secure error handling without information leakage",
      "project_examples": [
        "Generic error messages to users",
        "Detailed error logging internally",
        "Error rate monitoring and alerting"
      ],
      "summary": "Handle and log errors appropriately",
      "title": "Error Handling"
    }
  },
  "evidenceRequirements": {
    "code": {
      "collection": "Automated via annotation scanning",
      "description": "Source code implementation of the control",
      "examples": [
        "Function implementing the control",
        "Configuration enforcing the control"
      ]
    },
    "config": {
      "collection": "Configuration file analysis",
      "description": "Configuration implementing the control",
      "examples": [
        "Security headers",
        "Timeout values",
        "Encryption settings"
      ]
    },
    "documentation": {
      "collection": "Markdown and comment scanning",
      "description": "Documentation describing the control",
      "examples": [
        "API docs",
        "Security guides",
        "Runbooks"
      ]
    },
    "logs": {
      "collection": "Log aggregation queries",
      "description": "Log samples showing the control in action",
      "examples": [
        "Audit logs",
        "Access logs",
        "Error logs"
      ]
    },
    "test": {
      "collection": "Test file scanning and coverage reports",
      "description": "Tests verifying the control works correctly",
      "examples": [
        "Unit tests",
        "Integration tests",
        "Security tests"
      ]
    }
  },
  "implementationPatterns": {
    "authentication": {
      "controls": [
        "ia-2",
        "ia-5",
        "au-2"
      ],
      "description": "User authentication implementation",
      "go": {
        "example": "func Authenticate(credentials Credentials) (*User, error)",
        "libraries": [
          "golang-jwt",
          "bcrypt",
          "gorilla/sessions"
        ],
        "testingApproach": "Table-driven tests with mock stores"
      },
      "python": {
        "example": "async def authenticate(credentials: Credentials) -> User:",
        "libraries": [
          "django-auth",
          "flask-login",
          "passlib"
        ],
        "testingApproach": "pytest with fixtures for auth states"
      },
      "typescript": {
        "example": "export async function authenticate(credentials: Credentials): Promise<User>",
        "libraries": [
          "passport",
          "jsonwebtoken",
          "bcrypt"
        ],
        "testingApproach": "Unit tests for validation, integration tests for flow"
      }
    },
    "authorization": {
      "controls": [
        "ac-3",
        "ac-6",
        "au-2"
      ],
      "description": "Access control implementation",
      "go": {
        "example": "func Authorize(user User, resource Resource, action Action) bool",
        "libraries": [
          "casbin",
          "ladon",
          "ory/keto"
        ],
        "testingApproach": "Behavior-driven tests"
      },
      "python": {
        "example": "def authorize(user: User, resource: Resource, action: Action) -> bool:",
        "libraries": [
          "django-guardian",
          "flask-rbac",
          "py-abac"
        ],
        "testingApproach": "Parametrized tests for permission combinations"
      },
      "typescript": {
        "example": "export function authorize(user: User, resource: Resource, action: Action): boolean",
        "libraries": [
          "casl",
          "accesscontrol",
          "node-acl"
        ],
        "testingApproach": "Permission matrix tests"
      }
    },
    "encryption": {
      "controls": [
        "sc-8",
        "sc-13"
      ],
      "description": "Cryptographic protection implementation",
      "go": {
        "example": "func Encrypt(data []byte, key []byte) (EncryptedData, error)",
        "libraries": [
          "crypto/aes",
          "golang.org/x/crypto",
          "crypto/tls"
        ],
        "testingApproach": "Fuzz testing with go-fuzz"
      },
      "python": {
        "example": "async def encrypt(data: bytes, key: bytes) -> EncryptedData:",
        "libraries": [
          "cryptography",
          "pycryptodome",
          "passlib"
        ],
        "testingApproach": "Known plaintext/ciphertext pairs"
      },
      "typescript": {
        "example": "export async function encrypt(data: Buffer, key: Buffer): Promise<EncryptedData>",
        "libraries": [
          "node-forge",
          "crypto",
          "bcrypt"
        ],
        "testingApproach": "Test vectors from NIST"
      }
    },
    "logging": {
      "controls": [
        "au-2",
        "au-3",
        "si-11"
      ],
      "description": "Audit logging implementation",
      "go": {
        "example": "func AuditLog(event SecurityEvent) error",
        "libraries": [
          "zap",
          "logrus",
          "zerolog"
        ],
        "testingApproach": "Test logger with buffer"
      },
      "python": {
        "example": "def audit_log(event: SecurityEvent) -> None:",
        "libraries": [
          "structlog",
          "python-json-logger",
          "loguru"
        ],
        "testingApproach": "Log capture with pytest"
      },
      "typescript": {
        "example": "export function auditLog(event: SecurityEvent): void",
        "libraries": [
          "winston",
          "bunyan",
          "pino"
        ],
        "testingApproach": "Mock logger with assertion on calls"
      }
    },
    "validation": {
      "controls": [
        "si-10"
      ],
      "description": "Input validation implementation",
      "go": {
        "example": "func ValidateInput(input interface{}, schema Schema) (ValidatedData, error)",
        "libraries": [
          "validator",
          "go-playground/validator",
          "ozzo-validation"
        ],
        "testingApproach": "Table-driven validation tests"
      },
      "python": {
        "example": "def validate_input(input: Any, schema: Schema) -> ValidatedData:",
        "libraries": [
          "pydantic",
          "marshmallow",
          "cerberus"
        ],
        "testingApproach": "Property-based testing with hypothesis"
      },
      "typescript": {
        "example": "export function validateInput<T>(input: unknown, schema: Schema): T",
        "libraries": [
          "joi",
          "yup",
          "zod",
          "ajv"
        ],
        "testingApproach": "Positive and negative test cases"
      }
    }
  },
  "learningResources": {
    "advancedTopics": {
      "file": "COMPLIANCE_STANDARDS.md",
      "sections": [
        "patterns",
        "evidence",
        "automation"
      ],
      "timeEstimate": "60 minutes"
    },
    "gettingStarted": {
      "file": "NIST_IMPLEMENTATION_GUIDE.md",
      "sections": [
        "quick-start",
        "tagging-quick-reference"
      ],
      "timeEstimate": "15 minutes"
    }
  },
  "llmPrompts": {
    "controlSuggestion": "Based on the following code, suggest relevant NIST 800-53r5 controls from the moderate baseline. Focus on: {patterns}",
    "evidenceIdentification": "Identify evidence types that would demonstrate compliance with {control}",
    "gapAnalysis": "Analyze the following code for missing NIST controls related to {securityArea}",
    "implementationGuidance": "Provide implementation guidance for {control} in {language} for a {context} context"
  },
  "project": {
    "baseline": "moderate",
    "description": "Comprehensive software development standards with NIST 800-53r5 compliance",
    "name": "Software Development Standards",
    "primaryLanguages": [
      "typescript",
      "python",
      "go"
    ],
    "securityFocus": [
      "authentication",
      "authorization",
      "encryption",
      "logging"
    ]
  },
  "projectBaseline": {
    "customizations": {
      "additions": [],
      "modifications": [],
      "removals": []
    },
    "justification": "Appropriate for most web applications handling user data",
    "selected": "moderate"
  },
  "quickReferences": {
    "controlTaggingGuide": "./NIST_IMPLEMENTATION_GUIDE.md#tagging-quick-reference",
    "implementationGuide": "./NIST_IMPLEMENTATION_GUIDE.md",
    "quickStartCommand": "./scripts/setup-nist-hooks.sh",
    "validationCommand": "./scripts/nist-pre-commit.sh"
  },
  "version": "1.0.0"
}
