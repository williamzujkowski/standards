#!/bin/bash
# Critical Quality Issue Auto-Fix Script
# Generated by Code Review Agent - 2025-10-17
# Purpose: Fix critical issues identified in code quality review

set -e  # Exit on error

echo "======================================"
echo "Critical Quality Issues Auto-Fix"
echo "======================================"
echo ""

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track fixes
FIXES_APPLIED=0
ISSUES_FOUND=0

# Function to print status
print_status() {
    local status=$1
    local message=$2
    if [ "$status" == "success" ]; then
        echo -e "${GREEN}✓${NC} $message"
        ((FIXES_APPLIED++))
    elif [ "$status" == "warning" ]; then
        echo -e "${YELLOW}⚠${NC} $message"
    elif [ "$status" == "error" ]; then
        echo -e "${RED}✗${NC} $message"
        ((ISSUES_FOUND++))
    else
        echo "  $message"
    fi
}

echo "Step 1: Checking for large files..."
echo "-----------------------------------"
if [ -f ".swarm/memory.db-wal" ]; then
    SIZE=$(stat -f%z ".swarm/memory.db-wal" 2>/dev/null || stat -c%s ".swarm/memory.db-wal" 2>/dev/null)
    if [ "$SIZE" -gt 1048576 ]; then
        print_status "warning" "Found large file: .swarm/memory.db-wal ($(numfmt --to=iec $SIZE 2>/dev/null || echo "${SIZE} bytes"))"
        read -p "Remove this file? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -f .swarm/memory.db-wal
            print_status "success" "Removed .swarm/memory.db-wal"
        else
            print_status "warning" "Skipped removal of .swarm/memory.db-wal"
        fi
    fi
else
    print_status "success" "No large file found in .swarm/"
fi
echo ""

echo "Step 2: Python code auto-fixes (ruff)..."
echo "----------------------------------------"
if command -v ruff &> /dev/null; then
    print_status "info" "Running ruff auto-fix..."
    if ruff check --fix . 2>&1 | tee /tmp/ruff-fix.log; then
        FIXED_COUNT=$(grep -c "Fixed" /tmp/ruff-fix.log 2>/dev/null || echo "0")
        if [ "$FIXED_COUNT" -gt 0 ]; then
            print_status "success" "Ruff auto-fixed $FIXED_COUNT issues"
        else
            print_status "success" "Ruff completed (no auto-fixes needed)"
        fi
    else
        print_status "warning" "Ruff found issues requiring manual review"
    fi
else
    print_status "error" "Ruff not installed. Install with: pip install ruff"
fi
echo ""

echo "Step 3: Python import sorting (isort)..."
echo "----------------------------------------"
if command -v isort &> /dev/null; then
    print_status "info" "Running isort..."
    if isort --profile black . 2>&1 | tee /tmp/isort-fix.log; then
        print_status "success" "Imports sorted successfully"
    else
        print_status "warning" "isort found issues"
    fi
else
    print_status "error" "isort not installed. Install with: pip install isort"
fi
echo ""

echo "Step 4: Python code formatting (black)..."
echo "-----------------------------------------"
if command -v black &> /dev/null; then
    print_status "info" "Running black formatter..."
    if black . 2>&1 | tee /tmp/black-fix.log; then
        print_status "success" "Code formatted with black"
    else
        print_status "warning" "Black found issues"
    fi
else
    print_status "error" "black not installed. Install with: pip install black"
fi
echo ""

echo "Step 5: Verifying gitignore compliance..."
echo "-----------------------------------------"
GITIGNORED=$(git ls-files --cached --ignored --exclude-standard 2>/dev/null || true)
if [ -z "$GITIGNORED" ]; then
    print_status "success" "No gitignored files in staging"
else
    print_status "error" "Found gitignored files in staging:"
    echo "$GITIGNORED" | head -10
    if [ $(echo "$GITIGNORED" | wc -l) -gt 10 ]; then
        echo "  ... and $(( $(echo "$GITIGNORED" | wc -l) - 10 )) more"
    fi
fi
echo ""

echo "Step 6: Checking for remaining large files..."
echo "---------------------------------------------"
LARGE_FILES=$(find . -type f -size +1M \
    -not -path "./.git/*" \
    -not -path "./node_modules/*" \
    -not -path "./.claude-flow/*" \
    -not -path "./site/*" \
    -not -path "./.swarm/*" \
    2>/dev/null || true)

if [ -z "$LARGE_FILES" ]; then
    print_status "success" "No large files (>1MB) found"
else
    print_status "warning" "Large files found:"
    echo "$LARGE_FILES"
fi
echo ""

echo "Step 7: Running pre-commit validation..."
echo "----------------------------------------"
if command -v pre-commit &> /dev/null; then
    print_status "info" "Running pre-commit hooks..."
    if pre-commit run --all-files 2>&1 | tee /tmp/precommit.log; then
        print_status "success" "All pre-commit hooks passed"
    else
        print_status "warning" "Some pre-commit hooks failed (check /tmp/precommit.log)"
        echo ""
        echo "Failed hooks summary:"
        grep -E "(FAILED|Failed)" /tmp/precommit.log | head -10 || true
    fi
else
    print_status "error" "pre-commit not installed. Install with: pip install pre-commit"
fi
echo ""

echo "======================================"
echo "Fix Summary"
echo "======================================"
echo "Fixes applied: $FIXES_APPLIED"
echo "Issues found: $ISSUES_FOUND"
echo ""

if [ $ISSUES_FOUND -eq 0 ]; then
    print_status "success" "All critical issues resolved!"
    echo ""
    echo "Next steps:"
    echo "  1. Review changes: git diff"
    echo "  2. Run tests: python3 -m pytest tests/"
    echo "  3. Stage changes: git add ."
    echo "  4. Commit: git commit -m 'fix: resolve critical quality issues'"
    exit 0
else
    print_status "warning" "Some issues require manual attention"
    echo ""
    echo "Review the quality report for details:"
    echo "  reports/generated/code-quality-review.md"
    echo ""
    echo "Manual fixes needed:"
    echo "  - Review undefined names in template files"
    echo "  - Fix SQL injection examples"
    echo "  - Address security warnings in test files"
    exit 1
fi
