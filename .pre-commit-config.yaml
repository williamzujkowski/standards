# Pre-commit hooks for Standards Repository
# Comprehensive security and quality enforcement before commits
# Version: 2.0.0 - Enhanced Security & Validation

default_language_version:
  python: python3
  node: '20.0.0'

repos:
  # ============================================================================
  # SECURITY CHECKS (Critical - Run First)
  # ============================================================================

  # Secret Detection - Gitleaks (industry standard)
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.0
    hooks:
      - id: gitleaks
        name: Detect secrets and credentials
        description: Scans for hardcoded secrets, API keys, and credentials
        args: [--verbose, --report-format, json, --report-path, .gitleaks-report.json]

  # Advanced secret detection (fallback)
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect additional secret patterns
        args: [--baseline, .secrets.baseline]
        exclude: \.gitleaks-report\.json$|\.secrets\.baseline$

  # ============================================================================
  # FILE INTEGRITY & SIZE CHECKS
  # ============================================================================

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Large file prevention (1MB limit for most files)
      - id: check-added-large-files
        name: Prevent large files (>1MB)
        args: [--maxkb=1024]
        exclude: |
          (?x)^(
              .*\.(jpg|jpeg|png|gif|bmp|ico|svg|pdf|woff|woff2|ttf|otf|eot)$|
              docs/.*\.(png|jpg|gif|svg)$|
              examples/.*\.(jpg|jpeg|png)$|
              monitoring/.*\.json$|
              .*node_modules/.*$
          )$

      # Critical file validation
      - id: check-merge-conflict
        name: Check for merge conflict markers

      - id: detect-private-key
        name: Detect private keys

      - id: check-case-conflict
        name: Check for case conflicts

      - id: mixed-line-ending
        name: Fix mixed line endings
        args: [--fix=lf]

  # ============================================================================
  # FORMATTING & WHITESPACE (Safe fixes)
  # ============================================================================

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Whitespace and formatting fixes
      - id: trailing-whitespace
        name: Remove trailing whitespace
        args: [--markdown-linebreak-ext=md]

      - id: end-of-file-fixer
        name: Ensure files end with newline
        exclude: |
          (?x)^(
              .*\.(png|jpg|jpeg|gif|bmp|ico|svg|pdf|woff|woff2|ttf|otf|eot|zip|tar\.gz|tgz)$|
              .*\.min\.(js|css)$
          )$

      # JSON validation and formatting
      - id: check-json
        name: Validate JSON syntax
        exclude: |
          (?x)^(
              .*\.vscode/.*\.json$|
              package-lock\.json$|
              .*node_modules/.*\.json$
          )$

      - id: pretty-format-json
        name: Format JSON files
        args: [--autofix, --indent=2]
        exclude: |
          (?x)^(
              .*\.vscode/.*\.json$|
              package-lock\.json$|
              .*node_modules/.*\.json$|
              .*\.min\.json$
          )$

  # ============================================================================
  # SYNTAX VALIDATION
  # ============================================================================

  # YAML validation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-yaml
        name: Validate YAML syntax
        exclude: |
          (?x)^(
              deployment\.standards\.yaml$|
              .*\.template\.ya?ml$|
              .*\.example\.ya?ml$
          )$
        args: [--allow-multiple-documents]

  # Advanced YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: Advanced YAML linting
        args: [-c, .yamllint.yaml]

  # TOML validation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-toml
        name: Validate TOML syntax

  # XML validation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-xml
        name: Validate XML syntax

  # ============================================================================
  # MARKDOWN QUALITY
  # ============================================================================

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        name: Markdown quality checks
        args: [--config, .markdownlint.yaml, --fix]
        exclude: |
          (?x)^(
              node_modules/|
              examples/archive/|
              .*\.template\.md$|
              CHANGELOG\.md$
          )$

  # ============================================================================
  # GITIGNORE COMPLIANCE
  # ============================================================================

  - repo: local
    hooks:
      - id: gitignore-compliance
        name: Prevent committing gitignored files
        entry: bash
        args: ['-c', 'files=$(git ls-files --cached --ignored --exclude-standard); if [ -n "$files" ]; then echo "ERROR: Attempting to commit gitignored files:" && echo "$files" | head -20 && exit 1; fi']
        language: system
        pass_filenames: false
        always_run: true

      - id: large-file-check
        name: Custom large file detection (>1MB)
        entry: bash
        args: ['-c', 'files=$(find . -type f -size +1M -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.claude-flow/*"); if [ -n "$files" ]; then echo "ERROR: Large files detected (>1MB):" && echo "$files" | head -10 && exit 1; fi']
        language: system
        pass_filenames: false
        always_run: true

  # ============================================================================
  # PROJECT-SPECIFIC VALIDATION
  # ============================================================================

  - repo: local
    hooks:
      - id: standards-metadata
        name: Validate standards metadata
        entry: python lint/standards-linter.py
        language: python
        files: _STANDARDS\.md$|UNIFIED_STANDARDS\.md$
        additional_dependencies: [pyyaml, requests]
        pass_filenames: false

      - id: manifest-validation
        name: Validate MANIFEST.yaml integrity
        entry: python tests/validate_cross_references.py
        language: python
        files: MANIFEST\.yaml$
        additional_dependencies: [pyyaml]
        pass_filenames: false
        args: [--check-manifest-only]

      - id: cross-references
        name: Validate document cross-references
        entry: python tests/validate_cross_references.py
        language: python
        files: \.md$
        additional_dependencies: [pyyaml]
        pass_filenames: false
        args: [--check-links-only]

      - id: token-efficiency
        name: Analyze token efficiency
        entry: python tests/validate_token_efficiency.py
        language: python
        files: _STANDARDS\.md$
        pass_filenames: false
        args: [--summary-only]

      - id: no-debug-statements
        name: Prevent debug statements
        entry: bash -c 'grep -rn --include="*.py" --include="*.js" --include="*.ts" "console\.log\|debugger\|pdb\.set_trace\|breakpoint()" . && exit 1 || exit 0'
        language: system
        pass_filenames: false

  # ============================================================================
  # CODE QUALITY & LINTING
  # ============================================================================

  # Shell script security and quality
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: Shell script analysis
        args: [--severity=warning, --shell=bash, --external-sources]
        files: \.(sh|bash)$

  # Python code quality and security
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        name: Python code formatting
        files: \.(py)$
        exclude: ^(archive|vendor|node_modules)/

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Python import sorting
        files: \.(py)$
        args: [--profile, black, --check-only, --diff]

  # Advanced Python linting and security
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.2.1
    hooks:
      - id: ruff
        name: Python security & quality analysis
        files: \.(py)$
        args: [--fix, --select=E, W, F, B, S, C90, I, N, UP, YTT, ANN, ASYNC, BLE, A, COM, C4, DTZ, T10, EM, EXE, FA, ISC, ICN, G, PIE, T20, PYI, PT, Q, RSE, RET, SLF, SIM, TID, TCH, INT, ARG, PTH, TD, FIX, ERA, PD, PGH, PL, TRY, FLY, NPY, PERF, LOG, RUF]

  # TypeScript/JavaScript quality (if present)
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v9.0.0
    hooks:
      - id: eslint
        name: JavaScript/TypeScript linting
        files: \.(js|ts|jsx|tsx)$
        exclude: |
          (?x)^(
              node_modules/|
              .*\.min\.js$|
              dist/|
              build/
          )$
        additional_dependencies:
          - eslint@8.57.0
          - '@typescript-eslint/parser@7.1.0'
          - '@typescript-eslint/eslint-plugin@7.1.0'
        args: [--fix, --max-warnings=0]

  # ============================================================================
  # WORKFLOW PROTECTION
  # ============================================================================

  # Prevent direct commits to protected branches
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: no-commit-to-branch
        name: Protect main branches
        args: [--branch, main, --branch, master, --branch, production, --branch, release]

  # ============================================================================
  # FINAL VALIDATION
  # ============================================================================

  - repo: local
    hooks:
      - id: final-security-check
        name: Final security validation
        entry: bash -c 'echo "✓ All security checks passed"; echo "✓ No secrets detected"; echo "✓ No large files"; echo "✓ All syntax valid"'
        language: system
        pass_filenames: false
        always_run: true
        stages: [commit]

# ============================================================================
# CONFIGURATION
# ============================================================================

# Define which hooks run at different stages
default_stages: [commit, push]
minimum_pre_commit_version: 3.6.0

# Performance optimization
fail_fast: false  # Run all hooks even if one fails (for comprehensive reporting)
exclude: |
  (?x)^(
      \.git/|
      node_modules/|
      \.venv/|
      venv/|
      \.mypy_cache/|
      \.pytest_cache/|
      __pycache__/|
      \.idea/|
      \.vscode/|
      dist/|
      build/|
      .*\.egg-info/|
      \.gitleaks-report\.json$|
      \.secrets\.baseline$
  )$
