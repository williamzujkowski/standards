# ===== Environment Variables Template =====
#
# This file serves as a template for environment-specific configuration.
# Copy this file to .env (for local development) or .env.production (for production).
#
# SECURITY WARNINGS:
# - NEVER commit .env files containing real secrets to version control
# - Add .env* to .gitignore (except .env.example and .env.template)
# - Use a secrets manager (Vault, AWS Secrets Manager, etc.) in production
# - Rotate secrets regularly and audit access logs
#
# Usage:
#   cp .env.template .env
#   # Fill in actual values in .env
#
# ===== Application Configuration =====

# Application environment (development, staging, production)
NODE_ENV=development

# Application name
APP_NAME=my-application

# Application version
APP_VERSION=1.0.0

# Server configuration
PORT=3000
HOST=localhost

# Base URL for the application
BASE_URL=http://localhost:3000

# Logging level (trace, debug, info, warn, error, fatal)
LOG_LEVEL=info

# Logging format (json, pretty)
LOG_FORMAT=pretty


# ===== Database Configuration =====

# PostgreSQL
DB_HOST=localhost
DB_PORT=5432
DB_NAME=myapp_dev
DB_USER=postgres
DB_PASSWORD=changeme
DB_SSL_MODE=disable
DB_POOL_SIZE=10
DB_CONNECTION_TIMEOUT=5000

# Connection string (alternative to individual parameters)
# DATABASE_URL=postgresql://postgres:changeme@localhost:5432/myapp_dev?sslmode=disable

# MongoDB (if applicable)
# MONGODB_URI=mongodb://localhost:27017/myapp_dev
# MONGODB_USER=admin
# MONGODB_PASSWORD=changeme

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0
REDIS_TLS_ENABLED=false


# ===== Authentication & Security =====

# JWT configuration
JWT_SECRET=change-this-to-a-long-random-string-in-production
JWT_EXPIRATION=1h
JWT_REFRESH_EXPIRATION=7d
JWT_ALGORITHM=HS256

# Session configuration
SESSION_SECRET=change-this-to-a-long-random-string-in-production
SESSION_MAX_AGE=86400000

# Encryption keys (use strong random keys in production)
ENCRYPTION_KEY=change-this-to-32-byte-hex-string
ENCRYPTION_ALGORITHM=aes-256-gcm

# Password hashing
BCRYPT_ROUNDS=12

# CORS configuration
CORS_ORIGIN=http://localhost:3000
CORS_CREDENTIALS=true


# ===== External Services =====

# AWS Configuration
AWS_REGION=us-west-2
AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_S3_BUCKET=my-app-bucket

# Google Cloud Platform
# GCP_PROJECT_ID=my-gcp-project
# GCP_CREDENTIALS_PATH=/path/to/service-account-key.json

# Azure
# AZURE_TENANT_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
# AZURE_CLIENT_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
# AZURE_CLIENT_SECRET=your-client-secret


# ===== Third-Party APIs =====

# SendGrid (Email)
SENDGRID_API_KEY=SG.xxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
SENDGRID_FROM_EMAIL=noreply@example.com
SENDGRID_FROM_NAME=My Application

# Twilio (SMS)
TWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
TWILIO_AUTH_TOKEN=your-auth-token
TWILIO_PHONE_NUMBER=+15555555555

# Stripe (Payments)
STRIPE_PUBLISHABLE_KEY=<your-publishable-key>
STRIPE_SECRET_KEY=<your-secret-key>
STRIPE_WEBHOOK_SECRET=<your-webhook-secret>

# OAuth Providers
# GitHub
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret
GITHUB_CALLBACK_URL=http://localhost:3000/auth/github/callback

# Google OAuth
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_CALLBACK_URL=http://localhost:3000/auth/google/callback


# ===== Monitoring & Observability =====

# Sentry (Error tracking)
SENTRY_DSN=https://examplePublicKey@o0.ingest.sentry.io/0
SENTRY_ENVIRONMENT=development
SENTRY_TRACES_SAMPLE_RATE=0.1

# DataDog (APM)
DD_AGENT_HOST=localhost
DD_TRACE_AGENT_PORT=8126
DD_ENV=development
DD_SERVICE=my-application
DD_VERSION=1.0.0

# New Relic
# NEW_RELIC_LICENSE_KEY=your-license-key
# NEW_RELIC_APP_NAME=My Application


# ===== Feature Flags =====

# Feature toggles
FEATURE_NEW_UI=false
FEATURE_BETA_FEATURES=false
FEATURE_ANALYTICS=true
FEATURE_RATE_LIMITING=true


# ===== Development Tools =====

# Enable debug mode
DEBUG=false

# Enable API documentation
API_DOCS_ENABLED=true

# Enable profiling
PROFILING_ENABLED=false

# Hot reload
HOT_RELOAD=true


# ===== Testing Configuration =====

# Test database
TEST_DB_NAME=myapp_test
TEST_DB_HOST=localhost
TEST_DB_PORT=5432

# Test API keys (use fake/sandbox credentials)
TEST_STRIPE_KEY=<your-test-stripe-key>


# ===== Secrets Management (Production) =====

# HashiCorp Vault
VAULT_ADDR=https://vault.example.com:8200
VAULT_TOKEN=s.xxxxxxxxxxxxxxxxxxxxxx
VAULT_NAMESPACE=my-app

# AWS Secrets Manager
# AWS_SECRETS_MANAGER_REGION=us-west-2

# Azure Key Vault
# AZURE_KEY_VAULT_NAME=my-keyvault


# ===== Notes for Production =====
#
# 1. Use strong, randomly generated secrets:
#    - openssl rand -hex 32  # For 32-byte secrets
#    - node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
#
# 2. Rotate secrets regularly:
#    - JWT secrets: every 6-12 months
#    - API keys: per vendor recommendations
#    - Encryption keys: yearly or after suspected compromise
#
# 3. Use secrets management tools:
#    - AWS Secrets Manager: aws secretsmanager get-secret-value --secret-id my-secret
#    - HashiCorp Vault: vault kv get secret/my-app/config
#    - Azure Key Vault: az keyvault secret show --vault-name my-vault --name my-secret
#
# 4. Implement least-privilege access:
#    - Database users: read-only for read replicas, write for primary
#    - API keys: scope to minimum required permissions
#    - Service accounts: single-purpose, audited access
#
# 5. Monitor secret access:
#    - Enable audit logging for secrets management systems
#    - Alert on unauthorized access attempts
#    - Review access logs regularly
#
# 6. Container orchestration:
#    - Kubernetes: Use Secrets and ConfigMaps
#    - Docker: Use secrets management (docker secret create)
#    - ECS: Use AWS Systems Manager Parameter Store
#
# ===== End of Template =====
