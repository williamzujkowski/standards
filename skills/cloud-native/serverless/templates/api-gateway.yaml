openapi: 3.0.0
info:
  title: User Service API
  description: RESTful API for user management with serverless backend
  version: 1.0.0
  contact:
    email: api@example.com

servers:
  - url: https://api.example.com/v1
    description: Production
  - url: https://api-staging.example.com/v1
    description: Staging
  - url: http://localhost:3000/v1
    description: Local development

tags:
  - name: Users
    description: User management operations

paths:
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      description: Register a new user account
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              example1:
                value:
                  user_id: usr_123abc
                  name: John Doe
                  email: john@example.com
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:123456789012:function:user-service/invocations
        passthroughBehavior: when_no_match

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve detailed information about a specific user
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            pattern: '^usr_[a-zA-Z0-9]+$'
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:123456789012:function:user-service/invocations
        requestTemplates:
          application/json: |
            {
              "httpMethod": "GET",
              "pathParameters": {
                "id": "$input.params('id')"
              }
            }

    put:
      tags:
        - Users
      summary: Update user
      description: Update existing user information
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:123456789012:function:user-service/invocations

    delete:
      tags:
        - Users
      summary: Delete user
      description: Permanently delete a user account
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:123456789012:function:user-service/invocations

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - created_at
      properties:
        id:
          type: string
          description: Unique user identifier
          example: usr_123abc
        name:
          type: string
          description: Full name
          example: John Doe
        email:
          type: string
          format: email
          description: Email address
          example: john@example.com
        created_at:
          type: integer
          description: Unix timestamp of creation
          example: 1640995200
        updated_at:
          type: integer
          description: Unix timestamp of last update
          example: 1640995200

    CreateUserRequest:
      type: object
      required:
        - user_id
        - name
        - email
      properties:
        user_id:
          type: string
          pattern: '^usr_[a-zA-Z0-9]+$'
        name:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
          example: User not found
        details:
          type: string
          description: Additional error details

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true

x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: 400
    responseTemplates:
      application/json: '{"error": "Invalid request body"}'
  DEFAULT_5XX:
    statusCode: 500
    responseTemplates:
      application/json: '{"error": "Internal server error"}'
