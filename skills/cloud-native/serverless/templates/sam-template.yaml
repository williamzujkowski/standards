AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless user service with API Gateway, Lambda, and DynamoDB

Globals:
  Function:
    Runtime: python3.11
    Timeout: 30
    MemorySize: 512
    Architectures:
      - arm64  # Graviton2 for 20% cost savings
    Tracing: Active  # Enable X-Ray
    Environment:
      Variables:
        LOG_LEVEL: INFO
        POWERTOOLS_SERVICE_NAME: user-service
        POWERTOOLS_METRICS_NAMESPACE: Serverless
    Layers:
      - !Ref PowertoolsLayer

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment

  AlertEmail:
    Type: String
    Description: Email for CloudWatch alarms
    Default: alerts@example.com

Conditions:
  IsProduction: !Equals [!Ref Environment, prod]

Resources:
  # Lambda Layer with dependencies
  PowertoolsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: aws-lambda-powertools
      ContentUri: layers/powertools/
      CompatibleRuntimes:
        - python3.11
      RetentionPolicy: Retain

  # Lambda Function
  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-user-function'
      Handler: app.lambda_handler
      CodeUri: src/
      Description: User service API handler
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - CloudWatchPutMetricPolicy: {}
        - AWSXRayDaemonWriteAccess
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: GET
            RestApiId: !Ref UserApi
        CreateUser:
          Type: Api
          Properties:
            Path: /users
            Method: POST
            RestApiId: !Ref UserApi
      # Production: Enable provisioned concurrency
      ProvisionedConcurrencyConfig:
        !If
          - IsProduction
          - ProvisionedConcurrentExecutions: 5
          - !Ref AWS::NoValue

  # API Gateway
  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      StageName: !Ref Environment
      TracingEnabled: true
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '$context.requestId $context.httpMethod $context.path $context.status $context.responseLatency'

  # DynamoDB Table
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-users'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProduction, true, false]
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Log Groups
  UserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${UserFunction}'
      RetentionInDays: !If [IsProduction, 30, 7]

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AWS::StackName}-api'
      RetentionInDays: !If [IsProduction, 30, 7]

  # CloudWatch Alarms
  FunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-function-errors'
      AlarmDescription: Alert when Lambda function errors exceed threshold
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref UserFunction
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  FunctionDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-function-duration'
      AlarmDescription: Alert when Lambda duration is high
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10000  # 10 seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref UserFunction
      AlarmActions:
        - !Ref AlertTopic

  ApiErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-api-errors'
      AlarmDescription: Alert when API 5xx errors exceed threshold
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub '${AWS::StackName}-api'
      AlarmActions:
        - !Ref AlertTopic

  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-alerts'
      Subscription:
        - Endpoint: !Ref AlertEmail
          Protocol: email

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-api-url'

  FunctionArn:
    Description: Lambda function ARN
    Value: !GetAtt UserFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-function-arn'

  TableName:
    Description: DynamoDB table name
    Value: !Ref UsersTable
    Export:
      Name: !Sub '${AWS::StackName}-table-name'

  LogGroupName:
    Description: CloudWatch log group name
    Value: !Ref UserFunctionLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-log-group'
