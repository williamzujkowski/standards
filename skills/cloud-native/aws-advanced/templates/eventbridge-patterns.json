{
  "patterns": {
    "basic_order_placed": {
      "description": "Match all order placed events",
      "pattern": {
        "source": ["myapp.orders"],
        "detail-type": ["OrderPlaced"]
      }
    },
    "high_value_orders": {
      "description": "Match orders over $1000",
      "pattern": {
        "source": ["myapp.orders"],
        "detail-type": ["OrderPlaced"],
        "detail": {
          "amount": [{"numeric": [">", 1000]}]
        }
      }
    },
    "premium_user_orders": {
      "description": "Match orders from premium users in specific regions",
      "pattern": {
        "source": ["myapp.orders"],
        "detail-type": ["OrderPlaced"],
        "detail": {
          "userType": ["premium"],
          "region": ["us-east-1", "us-west-2"]
        }
      }
    },
    "or_condition": {
      "description": "Match orders that meet any of multiple conditions",
      "pattern": {
        "source": ["myapp.orders"],
        "detail-type": ["OrderPlaced"],
        "detail": {
          "$or": [
            {"amount": [{"numeric": [">=", 1000]}]},
            {"userType": ["premium"]},
            {"priority": ["high"]}
          ]
        }
      }
    },
    "ec2_state_changes": {
      "description": "Match EC2 instance state changes for t3 instances",
      "pattern": {
        "source": ["aws.ec2"],
        "detail-type": ["EC2 Instance State-change Notification"],
        "detail": {
          "state": ["running", "stopped", "terminated"],
          "instance-type": [{"prefix": "t3."}]
        }
      }
    },
    "s3_object_created": {
      "description": "Match S3 object creation in specific bucket",
      "pattern": {
        "source": ["aws.s3"],
        "detail-type": ["Object Created"],
        "detail": {
          "bucket": {
            "name": ["my-uploads-bucket"]
          },
          "object": {
            "key": [{"suffix": ".jpg"}]
          }
        }
      }
    },
    "multi_account": {
      "description": "Match events from multiple accounts",
      "pattern": {
        "source": ["myapp.orders"],
        "detail-type": ["OrderPlaced"],
        "account": ["123456789012", "210987654321"]
      }
    },
    "complex_filtering": {
      "description": "Complex filtering with nested conditions",
      "pattern": {
        "source": ["myapp.orders"],
        "detail-type": ["OrderPlaced"],
        "detail": {
          "status": ["pending"],
          "amount": [{"numeric": [">", 100, "<=", 1000]}],
          "items": {
            "category": ["electronics", "computers"]
          },
          "$or": [
            {"shippingMethod": ["express"]},
            {"userType": ["premium"]}
          ]
        }
      }
    },
    "exists_check": {
      "description": "Check if field exists or doesn't exist",
      "pattern": {
        "source": ["myapp.users"],
        "detail-type": ["UserRegistered"],
        "detail": {
          "email": [{"exists": true}],
          "referralCode": [{"exists": false}]
        }
      }
    },
    "ip_address_matching": {
      "description": "Match IP addresses using CIDR",
      "pattern": {
        "source": ["myapp.security"],
        "detail-type": ["LoginAttempt"],
        "detail": {
          "sourceIp": [{"cidr": "10.0.0.0/8"}]
        }
      }
    },
    "anything_but": {
      "description": "Match all values except specified ones",
      "pattern": {
        "source": ["myapp.orders"],
        "detail-type": ["OrderStatusChanged"],
        "detail": {
          "status": [{"anything-but": ["draft", "cancelled"]}]
        }
      }
    },
    "prefix_suffix": {
      "description": "Match string prefixes and suffixes",
      "pattern": {
        "source": ["myapp.files"],
        "detail-type": ["FileUploaded"],
        "detail": {
          "fileName": [{"prefix": "invoice-"}],
          "fileExtension": [{"suffix": ".pdf"}]
        }
      }
    }
  },
  "target_configurations": {
    "lambda_target": {
      "Arn": "arn:aws:lambda:us-east-1:123456789012:function:ProcessEvent",
      "Input": "$.detail",
      "RetryPolicy": {
        "MaximumRetryAttempts": 3,
        "MaximumEventAge": 3600
      },
      "DeadLetterConfig": {
        "Arn": "arn:aws:sqs:us-east-1:123456789012:dlq"
      }
    },
    "sqs_target": {
      "Arn": "arn:aws:sqs:us-east-1:123456789012:event-queue",
      "MessageGroupId": "$.detail.orderId"
    },
    "step_functions_target": {
      "Arn": "arn:aws:states:us-east-1:123456789012:stateMachine:OrderProcessing",
      "RoleArn": "arn:aws:iam::123456789012:role/EventBridgeRole",
      "Input": "$.detail"
    },
    "sns_target": {
      "Arn": "arn:aws:sns:us-east-1:123456789012:notifications",
      "Input": "{\"message\": $.detail.message, \"timestamp\": $.time}"
    },
    "kinesis_target": {
      "Arn": "arn:aws:kinesis:us-east-1:123456789012:stream/events",
      "PartitionKeyPath": "$.detail.orderId"
    },
    "api_destination": {
      "Arn": "arn:aws:events:us-east-1:123456789012:destination/webhook",
      "HttpParameters": {
        "HeaderParameters": {
          "X-Event-Type": "$.detail-type"
        },
        "QueryStringParameters": {
          "source": "$.source"
        }
      },
      "RoleArn": "arn:aws:iam::123456789012:role/EventBridgeRole"
    }
  },
  "input_transformers": {
    "simple_transform": {
      "InputPathsMap": {
        "orderId": "$.detail.orderId",
        "amount": "$.detail.amount",
        "customer": "$.detail.customerId"
      },
      "InputTemplate": "{\"order\": \"<orderId>\", \"total\": <amount>, \"customer\": \"<customer>\"}"
    },
    "complex_transform": {
      "InputPathsMap": {
        "id": "$.detail.orderId",
        "status": "$.detail.status",
        "time": "$.time",
        "region": "$.region"
      },
      "InputTemplate": "{\"orderId\": \"<id>\", \"orderStatus\": \"<status>\", \"eventTime\": \"<time>\", \"awsRegion\": \"<region>\", \"processedBy\": \"EventBridge\"}"
    }
  },
  "cross_account_rules": {
    "description": "Send events to different account",
    "pattern": {
      "source": ["myapp.orders"],
      "detail-type": ["OrderPlaced"]
    },
    "targets": [
      {
        "Arn": "arn:aws:events:us-east-1:210987654321:event-bus/partner-event-bus",
        "RoleArn": "arn:aws:iam::123456789012:role/CrossAccountEventBridgeRole"
      }
    ]
  },
  "scheduled_rules": {
    "hourly_check": {
      "description": "Run every hour",
      "scheduleExpression": "rate(1 hour)",
      "targets": [
        {
          "Arn": "arn:aws:lambda:us-east-1:123456789012:function:HourlyCheck"
        }
      ]
    },
    "daily_backup": {
      "description": "Daily backup at 2 AM UTC",
      "scheduleExpression": "cron(0 2 * * ? *)",
      "targets": [
        {
          "Arn": "arn:aws:lambda:us-east-1:123456789012:function:DailyBackup"
        }
      ]
    },
    "business_hours": {
      "description": "Every 15 minutes during business hours (9-5 Mon-Fri)",
      "scheduleExpression": "cron(0/15 9-17 ? * MON-FRI *)",
      "targets": [
        {
          "Arn": "arn:aws:lambda:us-east-1:123456789012:function:BusinessHoursTask"
        }
      ]
    }
  }
}
