{
  "workflows": {
    "sequential_with_error_handling": {
      "Comment": "Sequential workflow with comprehensive error handling",
      "StartAt": "ValidateInput",
      "States": {
        "ValidateInput": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ValidateInput",
          "ResultPath": "$.validation",
          "Next": "ProcessData",
          "Catch": [
            {
              "ErrorEquals": ["ValidationError"],
              "ResultPath": "$.error",
              "Next": "ValidationFailed"
            }
          ],
          "Retry": [
            {
              "ErrorEquals": ["States.TaskFailed"],
              "IntervalSeconds": 2,
              "MaxAttempts": 3,
              "BackoffRate": 2.0
            }
          ]
        },
        "ProcessData": {
          "Type": "Task",
          "Resource": "arn:aws:states:::lambda:invoke",
          "Parameters": {
            "FunctionName": "ProcessData",
            "Payload": {
              "input.$": "$.input",
              "validation.$": "$.validation"
            }
          },
          "ResultPath": "$.processResult",
          "Next": "StoreResults",
          "Retry": [
            {
              "ErrorEquals": ["States.Timeout"],
              "IntervalSeconds": 1,
              "MaxAttempts": 2,
              "BackoffRate": 1.5
            }
          ]
        },
        "StoreResults": {
          "Type": "Task",
          "Resource": "arn:aws:states:::dynamodb:putItem",
          "Parameters": {
            "TableName": "Results",
            "Item": {
              "id": {"S.$": "$.processResult.id"},
              "data": {"S.$": "States.JsonToString($.processResult.data)"},
              "timestamp": {"S.$": "$$.State.EnteredTime"}
            }
          },
          "End": true
        },
        "ValidationFailed": {
          "Type": "Task",
          "Resource": "arn:aws:states:::sns:publish",
          "Parameters": {
            "TopicArn": "arn:aws:sns:us-east-1:123456789012:ValidationFailures",
            "Message": {
              "error.$": "$.error",
              "input.$": "$.input"
            }
          },
          "End": true
        }
      }
    },
    "parallel_processing": {
      "Comment": "Parallel processing with aggregation",
      "StartAt": "FetchData",
      "States": {
        "FetchData": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:FetchData",
          "Next": "ParallelProcessing"
        },
        "ParallelProcessing": {
          "Type": "Parallel",
          "Branches": [
            {
              "StartAt": "ProcessImageResize",
              "States": {
                "ProcessImageResize": {
                  "Type": "Task",
                  "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ResizeImage",
                  "End": true
                }
              }
            },
            {
              "StartAt": "ExtractMetadata",
              "States": {
                "ExtractMetadata": {
                  "Type": "Task",
                  "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ExtractMetadata",
                  "End": true
                }
              }
            },
            {
              "StartAt": "VirusScan",
              "States": {
                "VirusScan": {
                  "Type": "Task",
                  "Resource": "arn:aws:lambda:us-east-1:123456789012:function:VirusScan",
                  "Retry": [
                    {
                      "ErrorEquals": ["States.TaskFailed"],
                      "IntervalSeconds": 5,
                      "MaxAttempts": 2,
                      "BackoffRate": 2.0
                    }
                  ],
                  "End": true
                }
              }
            }
          ],
          "ResultPath": "$.parallelResults",
          "Next": "AggregateResults",
          "Catch": [
            {
              "ErrorEquals": ["States.ALL"],
              "ResultPath": "$.error",
              "Next": "HandleParallelFailure"
            }
          ]
        },
        "AggregateResults": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:AggregateResults",
          "End": true
        },
        "HandleParallelFailure": {
          "Type": "Pass",
          "Result": "Parallel processing failed",
          "End": true
        }
      }
    },
    "map_state_batch": {
      "Comment": "Process batch of items with Map state",
      "StartAt": "GetBatch",
      "States": {
        "GetBatch": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:GetBatch",
          "ResultPath": "$.batch",
          "Next": "ProcessBatch"
        },
        "ProcessBatch": {
          "Type": "Map",
          "ItemsPath": "$.batch.items",
          "MaxConcurrency": 10,
          "Iterator": {
            "StartAt": "ProcessItem",
            "States": {
              "ProcessItem": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ProcessItem",
                "Retry": [
                  {
                    "ErrorEquals": ["States.TaskFailed"],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 2,
                    "BackoffRate": 2.0
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": ["States.ALL"],
                    "ResultPath": "$.error",
                    "Next": "ItemFailed"
                  }
                ],
                "End": true
              },
              "ItemFailed": {
                "Type": "Pass",
                "Result": "Item processing failed",
                "End": true
              }
            }
          },
          "ResultPath": "$.results",
          "Next": "GenerateReport"
        },
        "GenerateReport": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:GenerateReport",
          "End": true
        }
      }
    },
    "saga_pattern": {
      "Comment": "Saga pattern with compensating transactions",
      "StartAt": "ReserveInventory",
      "States": {
        "ReserveInventory": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ReserveInventory",
          "ResultPath": "$.reservation",
          "Next": "ChargeCustomer",
          "Catch": [
            {
              "ErrorEquals": ["States.ALL"],
              "ResultPath": "$.error",
              "Next": "TransactionFailed"
            }
          ]
        },
        "ChargeCustomer": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ChargeCustomer",
          "ResultPath": "$.charge",
          "Next": "ShipOrder",
          "Catch": [
            {
              "ErrorEquals": ["States.ALL"],
              "ResultPath": "$.error",
              "Next": "ReleaseInventory"
            }
          ]
        },
        "ShipOrder": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ShipOrder",
          "ResultPath": "$.shipment",
          "Next": "SendConfirmation",
          "Catch": [
            {
              "ErrorEquals": ["States.ALL"],
              "ResultPath": "$.error",
              "Next": "RefundCustomer"
            }
          ]
        },
        "SendConfirmation": {
          "Type": "Task",
          "Resource": "arn:aws:states:::sns:publish",
          "Parameters": {
            "TopicArn": "arn:aws:sns:us-east-1:123456789012:OrderConfirmations",
            "Message": {
              "orderId.$": "$.orderId",
              "status": "confirmed"
            }
          },
          "End": true
        },
        "RefundCustomer": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:RefundCustomer",
          "ResultPath": "$.refund",
          "Next": "ReleaseInventory"
        },
        "ReleaseInventory": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ReleaseInventory",
          "ResultPath": "$.release",
          "Next": "TransactionFailed"
        },
        "TransactionFailed": {
          "Type": "Task",
          "Resource": "arn:aws:states:::sns:publish",
          "Parameters": {
            "TopicArn": "arn:aws:sns:us-east-1:123456789012:FailedTransactions",
            "Message": {
              "orderId.$": "$.orderId",
              "error.$": "$.error",
              "compensated": true
            }
          },
          "Next": "FailState"
        },
        "FailState": {
          "Type": "Fail",
          "Cause": "Transaction failed and compensated"
        }
      }
    },
    "wait_and_choice": {
      "Comment": "Wait state and conditional branching",
      "StartAt": "SubmitJob",
      "States": {
        "SubmitJob": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:SubmitJob",
          "ResultPath": "$.job",
          "Next": "WaitForCompletion"
        },
        "WaitForCompletion": {
          "Type": "Wait",
          "Seconds": 30,
          "Next": "CheckJobStatus"
        },
        "CheckJobStatus": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:CheckJobStatus",
          "ResultPath": "$.status",
          "Next": "JobComplete?"
        },
        "JobComplete?": {
          "Type": "Choice",
          "Choices": [
            {
              "Variable": "$.status.state",
              "StringEquals": "COMPLETED",
              "Next": "ProcessResults"
            },
            {
              "Variable": "$.status.state",
              "StringEquals": "FAILED",
              "Next": "JobFailed"
            },
            {
              "Variable": "$.status.attempts",
              "NumericGreaterThan": 10,
              "Next": "JobTimeout"
            }
          ],
          "Default": "IncrementAttempts"
        },
        "IncrementAttempts": {
          "Type": "Pass",
          "Parameters": {
            "job.$": "$.job",
            "status.$": "$.status",
            "attempts.$": "States.MathAdd($.status.attempts, 1)"
          },
          "Next": "WaitForCompletion"
        },
        "ProcessResults": {
          "Type": "Task",
          "Resource": "arn:aws:lambda:us-east-1:123456789012:function:ProcessResults",
          "End": true
        },
        "JobFailed": {
          "Type": "Fail",
          "Cause": "Job execution failed"
        },
        "JobTimeout": {
          "Type": "Fail",
          "Cause": "Job exceeded maximum attempts"
        }
      }
    }
  }
}
