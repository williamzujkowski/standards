# OpenTelemetry Collector Configuration
# Receives traces, metrics, and logs, then exports to multiple backends

receivers:
  # OTLP receiver for traces, metrics, and logs
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - http://*
            - https://*
  
  # Jaeger receiver
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268
      thrift_compact:
        endpoint: 0.0.0.0:6831
  
  # Zipkin receiver
  zipkin:
    endpoint: 0.0.0.0:9411
  
  # Prometheus receiver (scrapes metrics)
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['localhost:8888']
  
  # Host metrics (CPU, memory, disk, network)
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      disk:
      filesystem:
      network:
      paging:
      process:
        mute_process_name_error: true

processors:
  # Batch processor - groups data before export
  batch:
    timeout: 10s
    send_batch_size: 1024
    send_batch_max_size: 2048
  
  # Memory limiter - prevents OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128
  
  # Resource processor - adds resource attributes
  resource:
    attributes:
      - key: environment
        value: production
        action: upsert
      - key: cluster
        value: us-east-1
        action: upsert
  
  # Attributes processor - manipulates attributes
  attributes:
    actions:
      - key: sensitive_data
        action: delete
      - key: user.email
        action: hash
  
  # Span processor - modifies spans
  span:
    name:
      from_attributes: [http.method, http.route]
      separator: " "
  
  # Probabilistic sampling - reduces trace volume
  probabilistic_sampler:
    sampling_percentage: 10
  
  # Tail sampling - intelligent sampling based on span characteristics
  tail_sampling:
    decision_wait: 10s
    num_traces: 100
    expected_new_traces_per_sec: 10
    policies:
      # Always sample error traces
      - name: error-traces
        type: status_code
        status_code:
          status_codes: [ERROR]
      
      # Always sample slow traces
      - name: slow-traces
        type: latency
        latency:
          threshold_ms: 1000
      
      # Sample 5% of successful fast traces
      - name: probabilistic-policy
        type: probabilistic
        probabilistic:
          sampling_percentage: 5
      
      # Always sample traces with specific attributes
      - name: important-service
        type: string_attribute
        string_attribute:
          key: service.name
          values:
            - payment-service
            - auth-service
  
  # Filter processor - drops unwanted data
  filter:
    traces:
      span:
        - 'attributes["http.target"] == "/health"'
        - 'attributes["http.target"] == "/ready"'
    metrics:
      metric:
        - 'name == "unwanted_metric"'

  # Resource detection - auto-detects cloud/container attributes
  resourcedetection:
    detectors: [env, system, docker, kubernetes]
    timeout: 5s
    override: false

exporters:
  # Jaeger exporter for traces
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true
  
  # OTLP exporter for Tempo (traces)
  otlp/tempo:
    endpoint: tempo:4317
    tls:
      insecure: true
  
  # Prometheus exporter for metrics
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: otel
    const_labels:
      environment: production
  
  # OTLP exporter for metrics (to Prometheus remote write compatible backends)
  otlphttp/prometheus:
    endpoint: http://prometheus:9090/api/v1/otlp
    tls:
      insecure: true
  
  # Loki exporter for logs
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    labels:
      attributes:
        service.name: "service_name"
        severity: "severity"
  
  # File exporter for debugging
  file:
    path: /var/log/otel-collector/traces.json
    rotation:
      max_megabytes: 100
      max_days: 7
      max_backups: 3
  
  # Logging exporter for debugging
  logging:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200
  
  # Kafka exporter (optional)
  kafka:
    protocol_version: 2.0.0
    brokers:
      - kafka:9092
    topic: otlp-traces
    encoding: otlp_proto
  
  # OTLP HTTP exporter (generic)
  otlphttp:
    endpoint: http://backend:4318
    headers:
      api-key: "your-api-key"

extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133
  
  # Performance profiler
  pprof:
    endpoint: 0.0.0.0:1777
  
  # zPages for diagnostics
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  
  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp, jaeger, zipkin]
      processors: [memory_limiter, resource, attributes, span, tail_sampling, batch]
      exporters: [jaeger, otlp/tempo, logging]
    
    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus, hostmetrics]
      processors: [memory_limiter, resource, batch]
      exporters: [prometheus, otlphttp/prometheus, logging]
    
    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [loki, logging]
  
  telemetry:
    logs:
      level: info
      development: false
      encoding: json
      output_paths:
        - stdout
        - /var/log/otel-collector/collector.log
    metrics:
      level: detailed
      address: 0.0.0.0:8888

# Additional configuration examples:

# For high-volume environments:
# - Increase batch sizes
# - Use more aggressive sampling
# - Enable queue retry with backoff
# - Scale collector horizontally

# For debugging:
# - Enable file exporter
# - Set logging verbosity to detailed
# - Use zpages extension
# - Reduce sampling for testing

# Security considerations:
# - Enable TLS for all endpoints
# - Use authentication for exporters
# - Hash or remove sensitive attributes
# - Implement rate limiting
