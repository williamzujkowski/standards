// Client-side search functionality using Lunr.js
(function() {
  // Search index data will be generated by Jekyll
  var searchData = null;
  var searchIndex = null;
  var searchInput = document.getElementById('search-input');
  var searchResults = document.getElementById('search-results');
  
  if (!searchInput || !searchResults) return;
  
  // Load search data
  fetch(baseurl + '/search.json')
    .then(response => response.json())
    .then(data => {
      searchData = data;
      // Build search index
      searchIndex = lunr(function() {
        this.ref('id');
        this.field('title', { boost: 10 });
        this.field('content');
        this.field('category', { boost: 5 });
        this.field('tags', { boost: 3 });
        
        searchData.forEach(function(doc) {
          this.add(doc);
        }, this);
      });
    })
    .catch(error => {
      console.error('Error loading search data:', error);
    });
  
  // Search function
  function performSearch(query) {
    if (!searchIndex || !query || query.length < 2) {
      searchResults.innerHTML = '';
      return;
    }
    
    try {
      var results = searchIndex.search(query);
      displayResults(results, query);
    } catch (error) {
      console.error('Search error:', error);
      searchResults.innerHTML = '<p>Search error. Please try again.</p>';
    }
  }
  
  // Display search results
  function displayResults(results, query) {
    if (results.length === 0) {
      searchResults.innerHTML = '<p>No results found for "' + escapeHtml(query) + '"</p>';
      return;
    }
    
    var html = '<h3>Search Results (' + results.length + ')</h3>';
    html += '<div class="search-results-list">';
    
    results.slice(0, 10).forEach(function(result) {
      var item = searchData.find(function(doc) {
        return doc.id === result.ref;
      });
      
      if (item) {
        html += '<div class="search-result">';
        html += '<a href="' + baseurl + item.url + '" class="result-title">' + escapeHtml(item.title) + '</a>';
        if (item.category) {
          html += ' <span class="result-category">[' + item.category + ']</span>';
        }
        html += '<div class="result-excerpt">' + getExcerpt(item.content, query) + '</div>';
        html += '</div>';
      }
    });
    
    html += '</div>';
    
    if (results.length > 10) {
      html += '<p>Showing first 10 results of ' + results.length + '</p>';
    }
    
    searchResults.innerHTML = html;
  }
  
  // Get excerpt with highlighted search term
  function getExcerpt(content, query) {
    var cleanContent = content.replace(/[#*`\[\]]/g, '').substring(0, 500);
    var lowerContent = cleanContent.toLowerCase();
    var lowerQuery = query.toLowerCase();
    var index = lowerContent.indexOf(lowerQuery);
    
    if (index === -1) {
      return cleanContent.substring(0, 150) + '...';
    }
    
    var start = Math.max(0, index - 50);
    var end = Math.min(cleanContent.length, index + query.length + 100);
    var excerpt = '...' + cleanContent.substring(start, end) + '...';
    
    // Highlight the search term
    var regex = new RegExp('(' + escapeRegex(query) + ')', 'gi');
    excerpt = excerpt.replace(regex, '<mark>$1</mark>');
    
    return excerpt;
  }
  
  // Utility functions
  function escapeHtml(text) {
    var div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
  
  function escapeRegex(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }
  
  // Debounce function
  function debounce(func, wait) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      clearTimeout(timeout);
      timeout = setTimeout(function() {
        func.apply(context, args);
      }, wait);
    };
  }
  
  // Event listeners
  searchInput.addEventListener('input', debounce(function(e) {
    performSearch(e.target.value);
  }, 300));
  
  // Handle search from URL parameter
  var urlParams = new URLSearchParams(window.location.search);
  var searchQuery = urlParams.get('q');
  if (searchQuery) {
    searchInput.value = searchQuery;
    // Wait for index to load
    var checkInterval = setInterval(function() {
      if (searchIndex) {
        clearInterval(checkInterval);
        performSearch(searchQuery);
      }
    }, 100);
  }
})();