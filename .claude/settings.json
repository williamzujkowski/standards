{
  "enabledMcpjsonServers": [
    "claude-flow",
    "ruv-swarm"
  ],
  "env": {
    "CLAUDE_FLOW_AUTO_COMMIT": "false",
    "CLAUDE_FLOW_AUTO_PUSH": "false",
    "CLAUDE_FLOW_CHECKPOINTS_ENABLED": "true",
    "CLAUDE_FLOW_HOOKS_ENABLED": "true",
    "CLAUDE_FLOW_REMOTE_EXECUTION": "true",
    "CLAUDE_FLOW_TELEMETRY_ENABLED": "true"
  },
  "hooks": {
    "PostToolUse": [
      {
        "hooks": [
          {
            "command": "cat | jq -r '.tool_input.command // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-flow@alpha hooks post-command --command '{}' --track-metrics true --store-results true",
            "type": "command"
          }
        ],
        "matcher": "Bash"
      },
      {
        "hooks": [
          {
            "command": "cat | jq -r '.tool_input.file_path // .tool_input.path // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-flow@alpha hooks post-edit --file '{}' --format true --update-memory true",
            "type": "command"
          }
        ],
        "matcher": "Write|Edit|MultiEdit"
      }
    ],
    "PreCompact": [
      {
        "hooks": [
          {
            "command": "/bin/bash -c 'INPUT=$(cat); CUSTOM=$(echo \"$INPUT\" | jq -r \".custom_instructions // \\\"\\\"\"); echo \"\ud83d\udd04 PreCompact Guidance:\"; echo \"\ud83d\udccb IMPORTANT: Review CLAUDE.md in project root for:\"; echo \"   \u2022 54 available agents and concurrent usage patterns\"; echo \"   \u2022 Swarm coordination strategies (hierarchical, mesh, adaptive)\"; echo \"   \u2022 SPARC methodology workflows with batchtools optimization\"; echo \"   \u2022 Critical concurrent execution rules (GOLDEN RULE: 1 MESSAGE = ALL OPERATIONS)\"; if [ -n \"$CUSTOM\" ]; then echo \"\ud83c\udfaf Custom compact instructions: $CUSTOM\"; fi; echo \"\u2705 Ready for compact operation\"'",
            "type": "command"
          }
        ],
        "matcher": "manual"
      },
      {
        "hooks": [
          {
            "command": "/bin/bash -c 'echo \"\ud83d\udd04 Auto-Compact Guidance (Context Window Full):\"; echo \"\ud83d\udccb CRITICAL: Before compacting, ensure you understand:\"; echo \"   \u2022 All 54 agents available in .claude/agents/ directory\"; echo \"   \u2022 Concurrent execution patterns from CLAUDE.md\"; echo \"   \u2022 Batchtools optimization for 300% performance gains\"; echo \"   \u2022 Swarm coordination strategies for complex tasks\"; echo \"\u26a1 Apply GOLDEN RULE: Always batch operations in single messages\"; echo \"\u2705 Auto-compact proceeding with full agent context\"'",
            "type": "command"
          }
        ],
        "matcher": "auto"
      }
    ],
    "PreToolUse": [
      {
        "hooks": [
          {
            "command": "cat | jq -r '.tool_input.command // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-flow@alpha hooks pre-command --command '{}' --validate-safety true --prepare-resources true",
            "type": "command"
          }
        ],
        "matcher": "Bash"
      },
      {
        "hooks": [
          {
            "command": "cat | jq -r '.tool_input.file_path // .tool_input.path // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-flow@alpha hooks pre-edit --file '{}' --auto-assign-agents true --load-context true",
            "type": "command"
          }
        ],
        "matcher": "Write|Edit|MultiEdit"
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "command": "npx claude-flow@alpha hooks session-end --generate-summary true --persist-state true --export-metrics true",
            "type": "command"
          }
        ]
      }
    ]
  },
  "includeCoAuthoredBy": true,
  "permissions": {
    "allow": [
      "Bash(npx claude-flow *)",
      "Bash(npm run lint)",
      "Bash(npm run test:*)",
      "Bash(npm test *)",
      "Bash(git status)",
      "Bash(git diff *)",
      "Bash(git log *)",
      "Bash(git add *)",
      "Bash(git commit *)",
      "Bash(git push)",
      "Bash(git config *)",
      "Bash(git tag *)",
      "Bash(git branch *)",
      "Bash(git checkout *)",
      "Bash(git stash *)",
      "Bash(jq *)",
      "Bash(node *)",
      "Bash(which *)",
      "Bash(pwd)",
      "Bash(ls *)"
    ],
    "deny": [
      "Bash(rm -rf /)",
      "Bash(curl * | bash)",
      "Bash(wget * | sh)",
      "Bash(eval *)"
    ]
  }
}
